// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "cockroachdb"
  url               = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Optional for migrations
}

enum Role {
  RECRUITER
  JOB_APPLICANT
}

model User {
  id          BigInt            @id @default(autoincrement()) // Use BigInt for compatibility with CockroachDB
  email       String            @unique
  password    String
  role        Role
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relationships
  company     Company?          // Optional: a recruiter can own one company
  applications JobApplication[] // A job applicant can have multiple job applications
}

model Company {
  id      BigInt  @id @default(autoincrement()) // Use BigInt for compatibility with CockroachDB
  name    String
  ownerId BigInt  @unique // Each company can have only one owner
  owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Relationships
  jobs    Job[]
}

model Job {
  id          BigInt   @id @default(autoincrement()) // Use BigInt for compatibility with CockroachDB
  title       String
  description String
  skills      String[] @default([]) // Array field for required skills
  companyId   BigInt   // Foreign key linking to Company
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relationships
  applications JobApplication[]
}

model JobApplication {
  id          BigInt            @id @default(autoincrement()) // Use BigInt for compatibility with CockroachDB
  jobId       BigInt            // Foreign key linking to Job
  applicantId BigInt            // Foreign key linking to User
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())

  // Relationships
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicant   User              @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}